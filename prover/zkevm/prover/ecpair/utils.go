package ecpair

import (
	"github.com/consensys/gnark-crypto/ecc/bn254"
	"github.com/consensys/gnark-crypto/ecc/bn254/fp"
	"github.com/consensys/linea-monorepo/prover/maths/field"
	"github.com/consensys/linea-monorepo/prover/utils"
	"github.com/consensys/linea-monorepo/prover/zkevm/prover/common"
)

// limbSize holds the size of each "outer" limb. 16 * 8 = 128 bits
const limbSize = 16
const bytesPerLimb = 2

type GtLimbs = [nbGtLimbs]field.Element
type G1Limbs = [nbG1Limbs]field.Element
type G2Limbs = [nbG2Limbs]field.Element
type ResultLimbs = [2]field.Element

func convG1WizardToGnark(limbs [common.NbLimbU128]G1Limbs) bn254.G1Affine {
	var res bn254.G1Affine
	var buf [fp.Bytes]byte

	copyTo := func(i int, dst *fp.Element) {
		offset := 0
		for j := range common.NbLimbU128 {
			l0 := limbs[j][i].Bytes()
			copy(buf[offset:offset+bytesPerLimb], l0[30:32])

			l1 := limbs[j][i+1].Bytes()
			copy(buf[offset+limbSize:offset+limbSize+bytesPerLimb], l1[30:32])

			offset += bytesPerLimb
		}

		dst.SetBytes(buf[:])
	}

	copyTo(0, &res.X)
	copyTo(2, &res.Y)

	return res
}

func convG2WizardToGnark(limbs [common.NbLimbU128]G2Limbs) bn254.G2Affine {
	var res bn254.G2Affine
	var buf [fp.Bytes]byte

	copyTo := func(i int, dst *fp.Element) {
		offset := 0
		for j := range common.NbLimbU128 {
			l0 := limbs[j][i].Bytes()
			copy(buf[offset:offset+bytesPerLimb], l0[30:32])

			l1 := limbs[j][i+1].Bytes()
			copy(buf[offset+limbSize:offset+limbSize+bytesPerLimb], l1[30:32])

			offset += bytesPerLimb
		}

		dst.SetBytes(buf[:])
	}

	// arithmetization provides G2 coordinates in the following order:
	//   X_Im, X_Re, Y_Im, Y_Re
	// but in gnark we expect
	//   X_Re, X_Im, Y_Re, Y_Im
	// so we need to swap the limbs.
	copyTo(0, &res.X.A1)
	copyTo(2, &res.X.A0)
	copyTo(4, &res.Y.A1)
	copyTo(6, &res.Y.A0)

	return res
}

func convGtGnarkToWizard(elem bn254.GT) [common.NbLimbU128]GtLimbs {
	var res [common.NbLimbU128]GtLimbs

	copyTo := func(i int, b [fp.Bytes]byte) {
		offset := 0
		for j := range common.NbLimbU128 {
			res[j][i].SetBytes(b[offset : offset+bytesPerLimb])
			res[j][i+1].SetBytes(b[offset+limbSize : offset+limbSize+bytesPerLimb])

			offset += bytesPerLimb
		}
	}

	copyTo(0, elem.C0.B0.A0.Bytes())
	copyTo(2, elem.C0.B0.A1.Bytes())
	copyTo(4, elem.C0.B1.A0.Bytes())
	copyTo(6, elem.C0.B1.A1.Bytes())
	copyTo(8, elem.C0.B2.A0.Bytes())
	copyTo(10, elem.C0.B2.A1.Bytes())
	copyTo(12, elem.C1.B0.A0.Bytes())
	copyTo(14, elem.C1.B0.A1.Bytes())
	copyTo(16, elem.C1.B1.A0.Bytes())
	copyTo(18, elem.C1.B1.A1.Bytes())
	copyTo(20, elem.C1.B2.A0.Bytes())
	copyTo(22, elem.C1.B2.A1.Bytes())

	return res
}

func inputFillerMillerLoop(circuitInstance, inputIndex int) field.Element {
	// prev = 1
	// p = g1 gen
	// q = g2 gen
	// curr = e(p, q)
	tbl := []string{
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0001",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0001",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0002",
		"0x198e", "0x9393", "0x920d", "0x483a", "0x7260", "0xbfb7", "0x31fb", "0x5d25",
		"0xf1aa", "0x4933", "0x35a9", "0xe712", "0x97e4", "0x85b7", "0xaef3", "0x12c2",
		"0x1800", "0xdeef", "0x121f", "0x1e76", "0x426a", "0x0066", "0x5e5c", "0x4479",
		"0x6743", "0x22d4", "0xf75e", "0xdadd", "0x46de", "0xbd5c", "0xd992", "0xf6ed",
		"0x0906", "0x89d0", "0x585f", "0xf075", "0xec9e", "0x99ad", "0x690c", "0x3395",
		"0xbc4b", "0x3133", "0x70b3", "0x8ef3", "0x55ac", "0xdadc", "0xd122", "0x975b",
		"0x12c8", "0x5ea5", "0xdb8c", "0x6deb", "0x4aab", "0x7180", "0x8dcb", "0x408f",
		"0xe3d1", "0xe769", "0x0c43", "0xd37b", "0x4ce6", "0xcc01", "0x66fa", "0x7daa",
		"0x1325", "0x04eb", "0x4501", "0xa5bf", "0x6b07", "0xaf56", "0xb7db", "0x0fa2",
		"0xe466", "0xd640", "0x9233", "0xe66e", "0x4c91", "0x5746", "0x81ba", "0x8566",
		"0x16ed", "0xf104", "0x0913", "0xf3d3", "0x5467", "0x6315", "0xf5d1", "0x58d6",
		"0x1ba6", "0xa736", "0x9eaa", "0xc1bc", "0x4f0c", "0x2d72", "0xbe31", "0xcee2",
		"0x132b", "0x66f5", "0xe20b", "0x77a7", "0x59f4", "0x1f13", "0xa5e6", "0xb041",
		"0x2c61", "0x1221", "0x2e63", "0x6552", "0x9f63", "0x0c85", "0x192a", "0xd16f",
		"0x0770", "0xc0ea", "0x6116", "0xb198", "0x6414", "0x1f82", "0x7243", "0x68f7",
		"0xe62d", "0xc0d6", "0xb74c", "0x6235", "0xd06c", "0xd152", "0xfd89", "0x81d2",
		"0x258c", "0x9238", "0x0ebc", "0x5b78", "0x19f4", "0x3f64", "0x398a", "0x51e1",
		"0xa120", "0xab1c", "0x3945", "0x8a75", "0xdf4f", "0x071d", "0x669f", "0x97d1",
		"0x2126", "0x8548", "0xf1ca", "0xcec5", "0xa8e6", "0x204e", "0xaead", "0x3b3f",
		"0xf317", "0xa4e8", "0x1f06", "0x29d8", "0x28e9", "0xb62d", "0x1a4e", "0x2c5e",
		"0x0f32", "0x6699", "0xd970", "0xd1ca", "0xa675", "0x6624", "0x2f7e", "0x890d",
		"0xe620", "0x9956", "0xa945", "0x6136", "0xd1dc", "0x8268", "0xabbb", "0x37ed",
		"0x2292", "0x54d2", "0x0275", "0xbc1c", "0xeb91", "0x6031", "0x1563", "0xe534",
		"0x2194", "0x46c3", "0xd731", "0xaefb", "0x89d3", "0x4d10", "0xfff9", "0x5c96",
		"0x22a6", "0x6075", "0xe8f0", "0x4e7e", "0xfd62", "0xa634", "0x33a2", "0xd91d",
		"0x2e5c", "0x6733", "0x34ca", "0xcb93", "0x39aa", "0xf167", "0x06d9", "0x9466",
		"0x0427", "0x8698", "0xc016", "0xccc6", "0xa0ed", "0x44a6", "0xbd59", "0x6c36",
		"0xfd06", "0xe50c", "0xe5e2", "0xed56", "0x05f9", "0xf606", "0xa88c", "0xe821",
		"0x0b02", "0x989b", "0x4da3", "0x4883", "0xf873", "0x6e7c", "0xf91e", "0x7ffb",
		"0x5737", "0x3255", "0x3ebd", "0x0ea9", "0xe971", "0x9e6d", "0x7ad4", "0x7418",
		"0x12f1", "0x1cc3", "0x7116", "0x3663", "0xd21b", "0x72b6", "0xf868", "0x08cb",
		"0x6481", "0xe1ab", "0xded4", "0x465c", "0x6e15", "0xfeb7", "0xa389", "0x480b",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%(common.NbLimbU128*(nbG1Limbs+nbG2Limbs+2*nbGtLimbs))])
	if err != nil {
		utils.Panic("failed to set string: %v", err)
	}
	return res
}

func inputFillerFinalExp(circuitInstance, inputIndex int) field.Element {
	// accumulator e(-p, q)
	// inputs e(p, q)
	// result e(-p, q) * e(p, q) == 1
	tbl := []string{
		"0x1325", "0x04eb", "0x4501", "0xa5bf", "0x6b07", "0xaf56", "0xb7db", "0x0fa2",
		"0xe466", "0xd640", "0x9233", "0xe66e", "0x4c91", "0x5746", "0x81ba", "0x8566",
		"0x16ed", "0xf104", "0x0913", "0xf3d3", "0x5467", "0x6315", "0xf5d1", "0x58d6",
		"0x1ba6", "0xa736", "0x9eaa", "0xc1bc", "0x4f0c", "0x2d72", "0xbe31", "0xcee2",
		"0x132b", "0x66f5", "0xe20b", "0x77a7", "0x59f4", "0x1f13", "0xa5e6", "0xb041",
		"0x2c61", "0x1221", "0x2e63", "0x6552", "0x9f63", "0x0c85", "0x192a", "0xd16f",
		"0x0770", "0xc0ea", "0x6116", "0xb198", "0x6414", "0x1f82", "0x7243", "0x68f7",
		"0xe62d", "0xc0d6", "0xb74c", "0x6235", "0xd06c", "0xd152", "0xfd89", "0x81d2",
		"0x258c", "0x9238", "0x0ebc", "0x5b78", "0x19f4", "0x3f64", "0x398a", "0x51e1",
		"0xa120", "0xab1c", "0x3945", "0x8a75", "0xdf4f", "0x071d", "0x669f", "0x97d1",
		"0x2126", "0x8548", "0xf1ca", "0xcec5", "0xa8e6", "0x204e", "0xaead", "0x3b3f",
		"0xf317", "0xa4e8", "0x1f06", "0x29d8", "0x28e9", "0xb62d", "0x1a4e", "0x2c5e",
		"0x2131", "0xe7d9", "0x07c0", "0xce5f", "0x11da", "0xdf92", "0x5202", "0xcf4f",
		"0xb160", "0xd13a", "0xbf2c", "0x6956", "0x6a44", "0x09ae", "0x2cc1", "0xc55a",
		"0x0dd1", "0xf9a0", "0xdebb", "0xe40c", "0xccbe", "0xe585", "0x6c1d", "0x7329",
		"0x75ed", "0x23cd", "0x9140", "0x1b91", "0xb24d", "0x3f05", "0xd883", "0xa0b1",
		"0x0dbd", "0xedfc", "0xf841", "0x51aa", "0xbaed", "0x9f82", "0x4dde", "0x7f40",
		"0x6925", "0x035e", "0x33a6", "0xfefa", "0x0275", "0x9aaf", "0xd1a3", "0x68e1",
		"0x2c3c", "0xc7da", "0x211a", "0xd363", "0x1763", "0x010f", "0xc427", "0xec26",
		"0x9a7a", "0x8584", "0x828e", "0xdd37", "0x3626", "0x9610", "0x2ff0", "0x1526",
		"0x2561", "0xb5d7", "0x938e", "0x57a5", "0xbfdc", "0xd739", "0x8862", "0xd862",
		"0x404a", "0x383c", "0x29b4", "0xbbe3", "0x52ae", "0xeda9", "0x5da8", "0x892f",
		"0x1d73", "0x31af", "0x701b", "0x69c5", "0xe634", "0xd2ff", "0x8919", "0x4f92",
		"0x32ff", "0x88e5", "0x899d", "0x8430", "0xce0a", "0x8d5f", "0x34f3", "0xb53c",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0001",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0002",
		"0x198e", "0x9393", "0x920d", "0x483a", "0x7260", "0xbfb7", "0x31fb", "0x5d25",
		"0xf1aa", "0x4933", "0x35a9", "0xe712", "0x97e4", "0x85b7", "0xaef3", "0x12c2",
		"0x1800", "0xdeef", "0x121f", "0x1e76", "0x426a", "0x0066", "0x5e5c", "0x4479",
		"0x6743", "0x22d4", "0xf75e", "0xdadd", "0x46de", "0xbd5c", "0xd992", "0xf6ed",
		"0x0906", "0x89d0", "0x585f", "0xf075", "0xec9e", "0x99ad", "0x690c", "0x3395",
		"0xbc4b", "0x3133", "0x70b3", "0x8ef3", "0x55ac", "0xdadc", "0xd122", "0x975b",
		"0x12c8", "0x5ea5", "0xdb8c", "0x6deb", "0x4aab", "0x7180", "0x8dcb", "0x408f",
		"0xe3d1", "0xe769", "0x0c43", "0xd37b", "0x4ce6", "0xcc01", "0x66fa", "0x7daa",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0001",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%(common.NbLimbU128*(nbG1Limbs+nbG2Limbs+nbGtLimbs+2))])
	if err != nil {
		utils.Panic("failed to set string: %v", err)
	}
	return res
}

func inputFillerG2Membership(circuitInstance, inputIndex int) field.Element {
	// g2 generator
	tbl := []string{
		"0x198e", "0x9393", "0x920d", "0x483a", "0x7260", "0xbfb7", "0x31fb", "0x5d25",
		"0xf1aa", "0x4933", "0x35a9", "0xe712", "0x97e4", "0x85b7", "0xaef3", "0x12c2",
		"0x1800", "0xdeef", "0x121f", "0x1e76", "0x426a", "0x0066", "0x5e5c", "0x4479",
		"0x6743", "0x22d4", "0xf75e", "0xdadd", "0x46de", "0xbd5c", "0xd992", "0xf6ed",
		"0x0906", "0x89d0", "0x585f", "0xf075", "0xec9e", "0x99ad", "0x690c", "0x3395",
		"0xbc4b", "0x3133", "0x70b3", "0x8ef3", "0x55ac", "0xdadc", "0xd122", "0x975b",
		"0x12c8", "0x5ea5", "0xdb8c", "0x6deb", "0x4aab", "0x7180", "0x8dcb", "0x408f",
		"0xe3d1", "0xe769", "0x0c43", "0xd37b", "0x4ce6", "0xcc01", "0x66fa", "0x7daa",
		"0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0000", "0x0001",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%(common.NbLimbU128*(nbG2Limbs+1))])
	if err != nil {
		utils.Panic("failed to set string: %v", err)
	}
	return res
}
